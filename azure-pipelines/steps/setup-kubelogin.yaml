# This is required because we have an AAD integrated AKS cluster
# and have disabled local accounts. kubelogin lets the service principal
# do a non-interactive login
#
# Required Variable Groups (must be set at job level)
# - group: mask-subscription-ids
# - group: aks-credentials-kv-group
steps:
- bash: |

    # Download and install
    curl -LO "https://github.com/Azure/kubelogin/releases/download/$(kubeloginVersion)/kubelogin-linux-amd64.zip"
    sudo unzip -j "kubelogin-linux-amd64.zip" -d /usr/local/bin
    rm -f "kubelogin-linux-amd64.zip"
    kubelogin --version
  displayName: Install kubelogin

  # For details, see # https://stackoverflow.com/questions/54004007/azure-devop-pipelines-authentication-to-aks-with-azure-ad-rbac-configured
- bash: |

    # First login to Azure
    az login \
      --service-principal \
      --username $AAD_SERVICE_PRINCIPAL_CLIENT_ID \
      --password $AAD_SERVICE_PRINCIPAL_CLIENT_SECRET \
      --tenant $AZ_TENANT_ID

    # Fails if it doesn't exist
    touch .kubeconfig-$(aksClusterName)
    chmod 600 .kubeconfig-$(aksClusterName)

    # Populate kubeconfig
    az aks get-credentials \
      --resource-group $(aksClusterResourceGroup) \
      --name $(aksClusterName) \
      --overwrite-existing \
      --file .kubeconfig-$(aksClusterName)

    # Pass kubeconfig to kubelogin to access k8s API
    export KUBECONFIG=$(pwd)/.kubeconfig-$(aksClusterName)
    kubelogin convert-kubeconfig -l spn

    # confirm it works
    kubectl get pods --namespace $(appNamespace)
  displayName: az login, get kubecontext
  env:
    AZ_TENANT_ID:                        $(tenant-id)
    AAD_SERVICE_PRINCIPAL_CLIENT_ID:     $(aks-architect-ci-dev-sp-client-id)
    AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: $(aks-architect-ci-dev-sp-client-secret)
